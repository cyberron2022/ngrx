{"version":3,"file":"621.3aacc3bd61e5b580.js","mappings":"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","names":["FilterTextboxComponent","constructor","this","EventEmitter","filter","_filter","val","changed","emit","ngOnInit","selectors","i0","CapitalizePipe","transform","value","charAt","toUpperCase","slice","pure","CustomersListComponent","sorterService","customers","_customers","filteredCustomers","calculateOrders","customersOrderTotal","forEach","cust","orderTotal","data","name","toLowerCase","indexOf","city","toString","sort","prop","customerTrackBy","index","customer","id","ctx","CustomersComponent","store","customerSelectors","customers$","loading$","getCustomers","dispatch","CustomerAction","routes","path","component","CustomersEditComponent","router","formBuilder","route","group","Validators","sub","customer$","subscribe","customerForm","patchValue","snapshot","paramMap","get","submit","valid","customerValue","navigate","add","delete","update","ngOnDestroy","unsubscribe","CustomersRoutingModule","RouterModule","CustomersModule","CommonModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/customers/customers-list/filter-textbox.component.ts","./src/app/shared/capitalize.pipe.ts","./src/app/customers/customers-list/customers-list.component.html","./src/app/customers/customers-list/customers-list.component.ts","./src/app/customers/customers.component.html","./src/app/customers/customers.component.ts","./src/app/customers/customers-routing.module.ts","./src/app/customers/customers-edit/customers-edit.component.ts","./src/app/customers/customers-edit/customers-edit.component.html","./src/app/customers/customers.module.ts"],"sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-filter-textbox',\n    template: `\n        Filter: <input type=\"text\" (input)=\"filter=$event.target.value\" [value]=\"filter\" />\n    `\n})\nexport class FilterTextboxComponent implements OnInit {\n\n    private _filter = '';\n\n    @Input() get filter() {\n        return this._filter;\n    }\n\n    set filter(val: string) {\n        this._filter = val;\n        this.changed.emit(this.filter); // Raise changed event\n    }\n\n    @Output() changed: EventEmitter<string> = new EventEmitter<string>();\n\n    constructor() { }\n\n    ngOnInit() {\n\n    }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'capitalize' })\nexport class CapitalizePipe implements PipeTransform {\n    transform(value: any) {\n        if (value) {\n            return value.charAt(0).toUpperCase() + value.slice(1);\n        }\n        return value;\n    }\n}\n","<app-filter-textbox (changed)=\"filter($event)\"></app-filter-textbox>\n<br />\n<br />\n<table class=\"table table-hover\">\n    <thead>\n        <tr>\n            <th (click)=\"sort('name')\">Name</th>\n            <th (click)=\"sort('city')\">City</th>\n            <th (click)=\"sort('orderTotal')\">Order Total</th>\n            <th colspan=\"2\">&nbsp;</th>\n        </tr>\n    </thead>\n    <tr *ngFor=\"let cust of filteredCustomers\">\n        <td>{{ cust.name | capitalize }}</td>\n        <td>{{ cust.city }}</td>\n        <td>{{ cust.orderTotal | currency:currencyCode:'symbol' }}</td>\n        <td><a [routerLink]=\"['/orders', cust.id]\">Orders</a></td>\n        <td><a [routerLink]=\"['/customers', cust.id]\">Edit</a></td>\n    </tr>\n    <tr *ngIf=\"filteredCustomers && filteredCustomers.length\">\n        <td colspan=\"2\">&nbsp;</td>\n        <td>\n            {{ customersOrderTotal | currency:currencyCode:'symbol' }}\n        </td>\n        <td colspan=\"2\">&nbsp;</td>\n    </tr>\n    <tr *ngIf=\"!filteredCustomers || !filteredCustomers.length\">\n        <td colspan=\"4\">No customers found</td>\n    </tr>\n</table>\nNumber of Customers: {{ filteredCustomers.length }}\n<br />","import { Component, Input, OnInit } from '@angular/core';\n\nimport { Customer } from '../../core/model/customer';\nimport { SorterService } from '../../core/sorter.service';\n\n@Component({\n  selector: 'app-customers-list',\n  templateUrl: './customers-list.component.html',\n})\nexport class CustomersListComponent implements OnInit {\n  private _customers: Customer[] = [];\n  @Input() get customers(): Customer[] {\n    return this._customers;\n  }\n  set customers(value: Customer[]) {\n    if (value) {\n      this.filteredCustomers = this._customers = value;\n    }\n  }\n  filteredCustomers: Customer[] = [];\n  customersOrderTotal: number;\n  currencyCode = 'USD';\n\n  constructor(private sorterService: SorterService) {}\n\n  ngOnInit() {\n    this.calculateOrders();\n  }\n\n  calculateOrders() {\n    this.customersOrderTotal = 0;\n    this.filteredCustomers.forEach((cust: Customer) => {\n      this.customersOrderTotal += cust.orderTotal;\n    });\n  }\n\n  filter(data: string) {\n    if (data) {\n      this.filteredCustomers = this.customers.filter((cust: Customer) => {\n        return (\n          cust.name.toLowerCase().indexOf(data.toLowerCase()) > -1 ||\n          cust.city.toLowerCase().indexOf(data.toLowerCase()) > -1 ||\n          cust.orderTotal.toString().indexOf(data) > -1\n        );\n      });\n    } else {\n      this.filteredCustomers = this.customers;\n    }\n    this.calculateOrders();\n  }\n\n  sort(prop: string) {\n    this.sorterService.sort(this.filteredCustomers, prop);\n  }\n\n  customerTrackBy(index: number, customer: Customer) {\n    return customer.id;\n  }\n}\n","<h1>{{ title }}</h1>\n<br />\n<div *ngIf=\"customers$ | async as customers\">\n    <app-customers-list [customers]=\"customers\"></app-customers-list>\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { Customer } from '../core/model/customer';\nimport { Observable } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { EntityState, CustomerSelectors } from '../store';\nimport * as CustomerAction from '../store/actions';\n\n@Component({\n    selector: 'app-customers',\n    templateUrl: './customers.component.html'\n})\nexport class CustomersComponent implements OnInit {\n    title = 'Customers';\n    customers$: Observable<Customer[]>;\n    loading$: Observable<boolean>;\n\n    constructor(\n        private store: Store<EntityState>,\n        private customerSelectors: CustomerSelectors) {\n\n    }\n\n    ngOnInit() {\n        this.customers$ = this.customerSelectors.customers$;\n        this.loading$ = this.customerSelectors.loading$;\n        this.getCustomers();\n        \n    }\n\n    getCustomers() {\n        this.store.dispatch(new CustomerAction.GetCustomers());\n        \n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CustomersComponent } from './customers.component';\nimport { CustomersEditComponent } from './customers-edit/customers-edit.component';\n\nconst routes: Routes = [\n    { path: '', component: CustomersComponent },\n    { path: ':id', component: CustomersEditComponent }\n];\n\n@NgModule({\n    imports: [ RouterModule.forChild(routes) ],\n    exports: [ RouterModule ]\n})\nexport class CustomersRoutingModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subscription } from 'rxjs';\nimport { Customer } from '../../core/model/customer';\nimport { CustomerSelectors, EntityState } from '../../store';\nimport * as CustomerAction from '../../store/actions';\n\n@Component({\n  selector: 'app-customers-edit',\n  templateUrl: './customers-edit.component.html',\n  styleUrls: ['./customers-edit.component.scss'],\n})\nexport class CustomersEditComponent implements OnInit, OnDestroy {\n  customerForm = this.formBuilder.group({\n    id: [],\n    name: ['', Validators.required],\n    city: ['', Validators.required],\n  });\n\n  customer: Customer;\n  loading$: Observable<boolean>;\n  sub: Subscription;\n\n  constructor(\n    private store: Store<EntityState>,\n    private customerSelectors: CustomerSelectors,\n    private router: Router,\n    private formBuilder: UntypedFormBuilder,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit() {\n    this.sub = this.customerSelectors.customer$.subscribe((cust) => {\n      if (cust) {\n        this.customer = cust;\n        this.customerForm.patchValue(this.customer);\n      }\n    });\n\n    this.loading$ = this.customerSelectors.loading$;\n    const id = +this.route.snapshot.paramMap.get('id');\n    this.store.dispatch(new CustomerAction.GetCustomer(id));\n  }\n\n  submit() {\n    if (this.customerForm.valid) {\n      const customerValue = { ...this.customer, ...this.customerForm.value };\n      this.store.dispatch(new CustomerAction.UpdateCustomer(customerValue));\n      this.router.navigate(['/customers']);\n    }\n  }\n\n  add(customer: Customer) {\n    this.store.dispatch(new CustomerAction.AddCustomer(customer));\n  }\n\n  delete(customer: Customer) {\n    this.store.dispatch(new CustomerAction.DeleteCustomer(customer));\n  }\n\n  update(customer: Customer) {\n    this.store.dispatch(new CustomerAction.UpdateCustomer(customer));\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","<div class=\"container\">\n  <h1>{{ this.customerForm.controls.name.value }}</h1>\n  <form [formGroup]=\"customerForm\" (ngSubmit)=\"submit()\">\n    <div class=\"form-group\">\n      <label for=\"name\">Id</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"id\" readonly />\n    </div>\n    <div class=\"form-group\">\n      <label for=\"name\">Name</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"name\" />\n      <div class=\"alert alert-danger\" [hidden]=\"!customer || customerForm.controls.name.valid\">Name is required</div>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"alterEgo\">City</label>\n      <input type=\"text\" class=\"form-control\" formControlName=\"city\" />\n      <div class=\"alert alert-danger\" [hidden]=\"!customer || customerForm.controls.city.valid\">Alter Ego is required</div>\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!customerForm.valid\">Submit</button>\n  </form>\n  <br />\n  <a routerLink=\"/customers\">View all customers</a>\n</div>","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { CustomersListComponent } from './customers-list/customers-list.component';\nimport { FilterTextboxComponent } from './customers-list/filter-textbox.component';\nimport { CustomersComponent } from './customers.component';\nimport { CustomersRoutingModule } from './customers-routing.module';\nimport { CustomersEditComponent } from './customers-edit/customers-edit.component';\n\n@NgModule({\n    imports: [ CommonModule, SharedModule, CustomersRoutingModule ],\n    declarations: [ CustomersListComponent, FilterTextboxComponent, CustomersComponent, CustomersEditComponent]\n})\nexport class CustomersModule { }\n"],"x_google_ignoreList":[]}